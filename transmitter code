#include <WiFi.h>
#include <esp_now.h>
#include <esp_wifi.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// ===== OLED =====
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// ===== Pins (TX) =====
const int VRxPin = 34;  // X pot (ADC1)
const int VRyPin = 32;  // Y pot (ADC1)
const int VP_PIN = 36;  // Battery divider VP (ADC1)

// ===== WiFi / ESP-NOW =====
// Boat STA MAC (your boat): 34:AB:95:42:47:74
const uint8_t RECEIVER_MAC[6] = {0x34,0xAB,0x95,0x42,0x47,0x74};
const uint8_t WIFI_CHANNEL = 1;

// ===== Battery (TX OLED) =====
const float ADC_REF_V = 3.3f;
const float DIV_GAIN  = 3.0f; // 20k:10k divider

// ===== Mapping state =====
int centerX = 2048, centerY = 2048;
const int deadband = 50;   // ±50 around center

// ===== Telemetry from boat (CSV "rssi,boatBatt_mV") =====
volatile int   lastBoatRSSI = 127;        // 127 = unknown
volatile uint16_t lastBoatBatt_mV = 0;

// ===== Helpers =====
static inline uint16_t readBattery_mV(int pin) {
  analogSetPinAttenuation(pin, ADC_11db);
  int raw = analogRead(pin);
  float vpin = (raw / 4095.0f) * ADC_REF_V;
  float vbat = vpin * DIV_GAIN;
  return (uint16_t)lroundf(vbat * 1000.0f);
}

// Map raw ADC to −255..0..+255
//  - raw==0 => -255 (full reverse)
//  - (center±deadband) => 0
static inline int16_t mapRawToCmd(int raw, int center) {
  int edgeL = center - deadband;
  int edgeH = center + deadband;
  if (edgeL < 1) edgeL = 1;
  if (edgeH > 4094) edgeH = 4094;

  if (raw == 0) return -255;
  if (raw >= edgeL && raw <= edgeH) return 0;

  if (raw > edgeH) {
    int spanHigh = 4095 - edgeH;
    int num      = raw  - edgeH;
    if (num < 0) num = 0; if (num > spanHigh) num = spanHigh;
    return (int16_t)(( (long)num * 255L ) / spanHigh);
  }

  int spanLow = edgeL;
  int num     = edgeL - raw;
  if (num < 0) num = 0; if (num > spanLow) num = spanLow;
  int16_t v = (int16_t)(( (long)num * 255L ) / spanLow);
  return -v;
}

// Convert RSSI (dBm) to a label
static const char* rssiLabel(int rssi) {
  if (rssi >= -50)              return "Excellent";
  else if (rssi >= -60)         return "Strong";
  else if (rssi >= -70)         return "Moderate";
  else if (rssi >= -80)         return "Weak";
  else                          return "Very Weak";
}

// ===== RX callback: boat sends CSV "rssi,boatBatt_mV" =====
void onDataRecv(const uint8_t* mac, const uint8_t* data, int len) {
  static char buf[32];
  if (len <= 0) return;
  if (len >= (int)sizeof(buf)) len = sizeof(buf)-1;
  memcpy(buf, data, len);
  buf[len] = '\0';

  // Debug
  Serial.printf("Boat->TX CSV: '%s'  from %02X:%02X:%02X:%02X:%02X:%02X\n",
                buf, mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);

  int rssi = 127;
  unsigned battmV = 0;
  if (sscanf(buf, "%d,%u", &rssi, &battmV) == 2) {
    lastBoatRSSI = rssi;
    lastBoatBatt_mV = (uint16_t)battmV;
  }
}

void setup() {
  Serial.begin(115200);

  // OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) { while (1){} }
  display.clearDisplay(); display.setTextSize(1);
  display.setCursor(0,0); display.println("Starting..."); display.display();

  // WiFi / ESP-NOW
  WiFi.mode(WIFI_STA);
  esp_wifi_set_promiscuous(true);
  esp_wifi_set_channel(WIFI_CHANNEL, WIFI_SECOND_CHAN_NONE);
  esp_wifi_set_promiscuous(false);

  if (esp_now_init() != ESP_OK) { while (1){} }
  esp_now_register_recv_cb(onDataRecv);

  esp_now_peer_info_t peer{};
  memcpy(peer.peer_addr, RECEIVER_MAC, 6);
  peer.channel = WIFI_CHANNEL;
  peer.encrypt = false;
  esp_now_add_peer(&peer);

  // Auto-center sticks at boot (average 32 samples)
  long sx = 0, sy = 0;
  for (int i = 0; i < 32; i++) { sx += analogRead(VRxPin); sy += analogRead(VRyPin); delay(3); }
  centerX = sx / 32;
  centerY = sy / 32;
  if (centerX < 100) centerX = 100; if (centerX > 3995) centerX = 3995;
  if (centerY < 100) centerY = 100; if (centerY > 3995) centerY = 3995;

  Serial.print("TX STA MAC: "); Serial.println(WiFi.macAddress());
}

void loop() {
  // Read sticks
  uint16_t xraw = analogRead(VRxPin);
  uint16_t yraw = analogRead(VRyPin);

  // Map to −255..+255
  int16_t cmdX = mapRawToCmd((int)xraw, centerX);
  int16_t cmdY = mapRawToCmd((int)yraw, centerY);

  // Send CSV "cmdX,cmdY" to boat
  char csv[24];
  snprintf(csv, sizeof(csv), "%d,%d", (int)cmdX, (int)cmdY);
  esp_now_send(RECEIVER_MAC, (uint8_t*)csv, strlen(csv));

  // Draw OLED: TX voltage, Boat voltage, RSSI + label, cmds
  uint16_t txBatt_mV = readBattery_mV(VP_PIN);

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);

  display.setCursor(0, 0);
  display.printf("TX:   %.2f V\n", txBatt_mV/1000.0f);

  display.setCursor(0, 12);
  if (lastBoatBatt_mV > 0) display.printf("Boat: %.2f V\n", lastBoatBatt_mV/1000.0f);
  else                     display.printf("Boat: --.-- V\n");

  display.setCursor(0, 24);
  if (lastBoatRSSI != 127) {
    display.printf("RSSI: %d dBm\n", lastBoatRSSI);
    display.setCursor(0, 36);
    display.printf("Link: %s\n", rssiLabel(lastBoatRSSI));
  } else {
    display.printf("RSSI: -- dBm\n");
    display.setCursor(0, 36);
    display.printf("Link: --\n");
  }

  display.setCursor(0, 50);
  display.printf("X:%4d  Y:%4d", cmdX, cmdY);

  display.display();
}
